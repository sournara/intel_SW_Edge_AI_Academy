#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdbool.h>
#include <time.h>
#include <math.h>
#include <stdlib.h>
#include <Windows.h> // GUI ���� ���

////////////////////
// ���� ������
///////////////////
HWND hwnd; // ������ ȭ�� (�ܺ�, ������)
HDC hdc; // ������ ȭ�� (����, ������)

FILE *rfp, *wfp;
char fileName[200];
int height;
int width;

// �޸� Ȯ��
// unsigned char inImage[height][width], outImage[height][width];
unsigned char** inImage, **outImage;

////////////////////
// �Լ� �����
///////////////////
void loadImage(); void printImage(); int getIntValue(); double getGamma(); int compare(const int*, const int*); void printMenu(); void saveImage();
void equalImage(); void addImage(); void subImage(); void revImage(); void bwImage();
void gamImage(); void CAPparaImage(); void CUPparaImage(); void avgbwImage(); // void midbwImage();
void stretchImage(); void posterImage();

void main() {

	hwnd = GetForegroundWindow();
	hdc = GetWindowDC(NULL); // Windows 10 : hwnd

	char inKey = 0;
	while (inKey != '9') {

		printMenu();
		inKey = _getch();
		system("cls");

		switch (inKey) {

		case '0': loadImage(); break;
		case '1': saveImage(); break;
		case '9': break;
		case 'a':
		case 'A': equalImage(); break;
		case 'b':
		case 'B': addImage(); break;
		case 'c':
		case 'C': subImage(); break;
		case 'd':
		case 'D': revImage(); break;
		case 'e':
		case 'E': bwImage(); break;
		case 'f':
		case 'F': gamImage(); break;
		case 'g':
		case 'G': CAPparaImage(); break;
		case 'h':
		case 'H': CUPparaImage(); break;
		case 'i':
		case 'I': avgbwImage(); break;
		/*case 'j':
		case 'J': midbwImage(); break;*/
		case 'k' :
		case 'K': stretchImage(); break;
		case 'l' :
		case 'L': posterImage(); break;

		}
	}
	for (int i = 0; i < height; i++) {

		free(inImage[i]);

	}
	free(inImage);

}

////////////////////
// �Լ� ���Ǻ�
///////////////////
// ���� �Լ�
void printMenu() {

	puts("\n ## GrayScale Image Processing (Beta 4) ##");
	puts("\n 0.���� 1.���� 9.����");
	puts("\n A.���� B.��� C.��Ӱ� D.���� E.���(128) F.���� G.CAP�Ķ󺼶� H.CUP�Ķ󺼶� I.���(��հ�) J.���(�߾Ӱ�) K.���ϴ��Ʈ��Ī L.�����Ͷ���¡");

}
void loadImage() {

	char fullName[200] = "D:/RAW/Etc_Raw(squre)/";
	char tmpName[50];
	printf("���ϸ� --> "); // flower512, LENA256
	scanf("%s", &tmpName);
	strcat(fullName, tmpName);
	strcat(fullName, ".raw");
	strcpy(fileName, fullName);

	// (�߿�!) �̹����� ���� ���̸� ����
	rfp = fopen(fileName, "rb");
	fseek(rfp, 0L, SEEK_END); // ������ ������ �̵�
	long long fsize = ftell(rfp); // �� ��������� ? 262,144 --> 512
	fclose(rfp);
	// ����, �� ���ϱ�
	height = width = (int)sqrt(fsize);
	// �޸� �Ҵ�
	inImage = (unsigned char**)malloc(sizeof(unsigned char*) * height);
	for (int i = 0; i < height; i++) {

		inImage[i] = (unsigned char*)malloc(sizeof(unsigned char) * width);

	}
	// ���� --> �޸�
	rfp = fopen(fileName, "rb");
	for (int i = 0; i < height; i++) {
	
		fread(inImage[i], sizeof(unsigned char), width, rfp);

	}
	fclose(rfp);

	equalImage();

}
void saveImage() {

	// �޸� �Ҵ�
	outImage = (unsigned char**)malloc(sizeof(unsigned char*) * height);
	for (int i = 0; i < height; i++) {

		outImage[i] = (unsigned char*)malloc(sizeof(unsigned char) * width);

	}
	char fullName[200] = "D:/RAW/Etc_Raw(squre))/";
	char tmpName[50];
	printf("���ϸ� --> "); // out01, out02...
	scanf("%s", &tmpName);
	strcat(fullName, tmpName);
	strcat(fullName, ".raw");
	strcpy(fileName, fullName);

	wfp = fopen(fileName, "wb");
	// �޸� --> ���� (�� �྿)
	for (int i = 0; i < height; i++) {
		fwrite(outImage[i], sizeof(unsigned char), width, wfp);
	}
	fclose(wfp);
	printf("���� �Ϸ�");

}
void printImage() {

	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			int px = outImage[i][k];
			SetPixel(hdc, k + 50, i + 250, RGB(px, px, px));
		}
		printf("\n");
	}
	printf("\n");

	for (int i = 0; i < height; i++) {

		free(outImage[i]);

	}
	free(outImage);

}
int getIntValue() {

	int retValue;
	printf("������ --> "); scanf("%d", &retValue);
	return retValue;

}
double getGamma() {

	double gamma;
	printf("���� �� --> "); scanf("%lf", &gamma);
	return gamma;

}
int compare(const int* a, const int* b) {

	return(*a - *b);

}
///////////////////
// ����ó�� �Լ�
///////////////////
void equalImage() { // ���Ͽ��� �˰�����

	printf("���Ͽ��� \n");
	// �޸� �Ҵ�
	outImage = (unsigned char**)malloc(sizeof(unsigned char*) * height);
	for (int i = 0; i < height; i++) {

		outImage[i] = (unsigned char*)malloc(sizeof(unsigned char) * width);

	}
	// �Է� �迭 --> ��� �迭
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			outImage[i][k] = inImage[i][k];
		}
	}
	printImage();

}
void addImage() { // ���ϱ� �˰�����

	int val = getIntValue();
	printf("��� �ϱ� \n");
	// �޸� �Ҵ�
	outImage = (unsigned char**)malloc(sizeof(unsigned char*) * height);
	for (int i = 0; i < height; i++) {

		outImage[i] = (unsigned char*)malloc(sizeof(unsigned char) * width);

	}
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			if (inImage[i][k] + val < 255)
				outImage[i][k] = inImage[i][k] + val;
			else
				outImage[i][k] = 255;
		}
	}
	printImage();

}
void subImage() { // ���� �˰�����

	int val = getIntValue();
	printf("��Ӱ� �ϱ� \n");
	// �޸� �Ҵ�
	outImage = (unsigned char**)malloc(sizeof(unsigned char*) * height);
	for (int i = 0; i < height; i++) {

		outImage[i] = (unsigned char*)malloc(sizeof(unsigned char) * width);

	}
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			if (inImage[i][k] - val > 0)
				outImage[i][k] = inImage[i][k] - val;
			else
				outImage[i][k] = 0;
		}
	}
	printImage();

}
void revImage() { // ���� ó��

	printf("���� ó�� \n");
	// �޸� �Ҵ�
	outImage = (unsigned char**)malloc(sizeof(unsigned char*) * height);
	for (int i = 0; i < height; i++) {

		outImage[i] = (unsigned char*)malloc(sizeof(unsigned char) * width);

	}
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			outImage[i][k] = 255 - inImage[i][k];
		}
	}
	printImage();

}
void bwImage() { // ���

	printf("���(128) \n");
	// �޸� �Ҵ�
	outImage = (unsigned char**)malloc(sizeof(unsigned char*) * height);
	for (int i = 0; i < height; i++) {

		outImage[i] = (unsigned char*)malloc(sizeof(unsigned char) * width);

	}
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			if (inImage[i][k] < 128)
				outImage[i][k] = 0;
			else
				outImage[i][k] = 255;
		}
	}
	printImage();

}
void gamImage() { // ����

	double gamma = getGamma();
	printf("���� ���� \n");
	// �޸� �Ҵ�
	outImage = (unsigned char**)malloc(sizeof(unsigned char*) * height);
	for (int i = 0; i < height; i++) {

		outImage[i] = (unsigned char*)malloc(sizeof(unsigned char) * width);

	}
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			outImage[i][k] = 255 * pow(inImage[i][k] / 255., 1 / gamma);
		}
	}
	printImage();

}
void CAPparaImage() { // CAP �Ķ󺼶�

	printf("CAP �Ķ󺼶� \n");
	// �޸� �Ҵ�
	outImage = (unsigned char**)malloc(sizeof(unsigned char*) * height);
	for (int i = 0; i < height; i++) {

		outImage[i] = (unsigned char*)malloc(sizeof(unsigned char) * width);

	}
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			outImage[i][k] = 255 * pow(inImage[i][k] / 127 - 1, 2);
		}
	}
	printImage();

}
void CUPparaImage() { // CUP �Ķ󺼶�

	printf("CUP �Ķ󺼶� \n");
	// �޸� �Ҵ�
	outImage = (unsigned char**)malloc(sizeof(unsigned char*) * height);
	for (int i = 0; i < height; i++) {

		outImage[i] = (unsigned char*)malloc(sizeof(unsigned char) * width);

	}
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			outImage[i][k] = 255 - 255 * pow(inImage[i][k] / 127 - 1, 2);
		}
	}
	printImage();

}
void avgbwImage() { // ���(��հ�)

	printf("���(��հ�) \n");
	// �޸� �Ҵ�
	outImage = (unsigned char**)malloc(sizeof(unsigned char*) * height);
	for (int i = 0; i < height; i++) {

		outImage[i] = (unsigned char*)malloc(sizeof(unsigned char) * width);

	}
	int avg;
	int hap = 0;
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			hap += inImage[i][k];
			avg = hap / (height * width);
		}
	}
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			if (inImage[i][k] < avg)
				outImage[i][k] = 0;
			else
				outImage[i][k] = 255;
		}
	}
	printImage();

}
void midbwImage() { // ���(�߾Ӱ�)

	printf("���(�߾Ӱ�) \n");
	int mid;
	int cnt = 0;
	int size = height * width;
	unsigned char* arr;
	arr = (unsigned char*)malloc(sizeof(unsigned char) * size);
	// unsigned char arr[height * width];
	
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			arr[cnt] = inImage[i][k];
			cnt++;
		}
	}
	printf("%d \n", arr[0]);
	qsort(arr, cnt, sizeof(unsigned char), compare);
	mid = arr[size / 2];

	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			if (inImage[i][k] < mid)
				outImage[i][k] = 0;
			else
				outImage[i][k] = 255;
		}
	}
	printImage();

	free(arr);

}
void stretchImage() {

	printf("���� ��� ��Ʈ��Ī \n");
	// �޸� �Ҵ�
	outImage = (unsigned char**)malloc(sizeof(unsigned char*) * height);
	for (int i = 0; i < height; i++) {

		outImage[i] = (unsigned char*)malloc(sizeof(unsigned char) * width);

	}
	int mini, maxi;
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			if (inImage[i][k] < inImage[i + 1][k + 1])
				mini = inImage[i][k];
			else
				mini = inImage[i + 1][k + 1];
		}
	}
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			if (inImage[i][k] > inImage[i + 1][k + 1])
				maxi = inImage[i][k];
			else
				maxi = inImage[i + 1][k + 1];
		}
	}
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			outImage[i][k] = (inImage[i][k] - mini) / (maxi - mini) * 255;
		}
	}
	printImage();

}
void posterImage() {

	printf("�����Ͷ���¡ \n");
	// �޸� �Ҵ�
	outImage = (unsigned char**)malloc(sizeof(unsigned char*) * height);
	for (int i = 0; i < height; i++) {

		outImage[i] = (unsigned char*)malloc(sizeof(unsigned char) * width);

	}
	for (int i = 0; i < height; i++) {
		for (int k = 0; k < width; k++) {
			if (0 <= inImage[i][k] < 32)
				outImage[i][k] = 31;
			else if (32 <= inImage[i][k] < 64)
				outImage[i][k] = 63;
			else if (64 <= inImage[i][k] < 96)
				outImage[i][k] = 95;
			else if (96 <= inImage[i][k] < 128)
				outImage[i][k] = 127;
			else if (128 <= inImage[i][k] < 160)
				outImage[i][k] = 159;
			else if (160 <= inImage[i][k] < 192)
				outImage[i][k] = 191;
			else if (192 <= inImage[i][k] < 224)
				outImage[i][k] = 223;
			else if (224 <= inImage[i][k] < 256)
				outImage[i][k] = 255;
		}
	}
	printImage();

}