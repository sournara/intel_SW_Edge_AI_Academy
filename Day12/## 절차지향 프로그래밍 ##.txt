## 절차지향 프로그래밍 ##

- 컴퓨터 : H/W + S/W
- H/W : CPU, RAM, Disk
- S/W : OS, App, P/L
- OS : Windows 10/11, Linux, Windows Server
- 가상 머신 : VMware, Virtual Box, Hyper-V
- Windows Server : 2016, 2019, 2022, (2025)
- Linux : RHEL : CentOS(X), Rocky(O), Fedora(?)
	    Debian : Ubuntu(*)
- Linux 명령어 : 파일 탐색기 --> cd, pwd, ls, mkdir, rmdir, rm, touch, cp, mv, vi(=vim), nano, dnf
- C 프로그래밍
  . 자료형 : 정수형 : char, short, int(*), long long ==> unsigned
   	       실수형 : float(4byte : 7자리), double(8byte : 15자리)
	       문자형 : char --> ASCII   'A' == 64

- 소프트웨어 개발 단계
. 알파(Alpha, Canary) : 치명적인 버그 가능
. 베타(Beta, Community) : 자잘한 버그 가능
. RC : 버그 거의 없음.
. Preview : 미리 보기
. 정식, RTM, GA, Ver 1.0 --> 릴리즈... Community(무료)
. Patch
. Update
. Service Pack

##미션##
1. GrayScale Image Processing (Alpha2) 버전 완성하기
(0) 선택한 파일의 크기를 결정 (7x7로 가정)
(1) 메모리 할당
(2) 이미지 파일을 2차원 배열로 (Random 처리) --> GrayScale Image
(3) 원본 출력
(4) 이미지를 반전 처리해서 출력 : 0->255, 1->254 ... 255->0
(5) 영상을 흑백처리 해서 출력 : 흑백이란 ? Black(0)과 White(255)만 존재하는 이미지

2. <심화>
(1) 영상의 평균값을 출력
(2) 영상의 최대값, 최소값 및 그 위치를 출력
(3) 영상의 중앙값(=중위수=Medium)과 위치를 출력
(4) 영상에서 최빈값(가장 많이 출현한 값) 출력